						.386p
						ASSUME	CS:CODE

						PUBLIC	VMFILE_READ_BATCH
						PUBLIC	VMFILE_WRITE_BATCH



SPRITERAM_SEGMENT				EQU		0114H
SPRITERAM_SIZE					EQU		32*1024
TOWNS_VMIF_CMD_FILE_RXRDY		EQU 	04H
TOWNS_VMIF_CMD_FILE_TXRDY		EQU 	06H
TOWNSIO_VM_HOST_IF_CMD_STATUS	EQU		2386H



CODE					SEGMENT

; void VMFILE_READ_BATCH(unsigned char buf[128*1024]);
VMFILE_READ_BATCH		PROC
						PUSH	EBP				; [EBP]=PrevEBP,  [EBP+4]=EIP,  [EIP+8]=BufferPtr
						MOV		EBP,ESP
						PUSHAD
						PUSHFD
						PUSH	ES

						MOV		AX,SPRITERAM_SEGMENT
						MOV		ES,AX
						CLI

						MOV		EDI,[EBP+8]
						CALL	XCHG_SPRITERAM

						MOV		AL,TOWNS_VMIF_CMD_FILE_RXRDY
						MOV		DX,TOWNSIO_VM_HOST_IF_CMD_STATUS
						OUT		DX,AL

						MOV		EDI,[EBP+8]
						CALL	XCHG_SPRITERAM

						POP		ES
						POPFD
						POPAD
						POP		EBP
						RET
VMFILE_READ_BATCH		ENDP



; void VMFILE_WRITE_BATCH(unsigned char buf[128*1024]);
VMFILE_WRITE_BATCH		PROC
						PUSH	EBP				; [EBP]=PrevEBP,  [EBP+4]=EIP,  [EIP+8]=BufferPtr
						MOV		EBP,ESP
						PUSHAD
						PUSHFD
						PUSH	ES

						MOV		AX,SPRITERAM_SEGMENT
						MOV		ES,AX
						CLI

						MOV		EDI,[EBP+8]
						CALL	XCHG_SPRITERAM

						MOV		AL,TOWNS_VMIF_CMD_FILE_TXRDY
						MOV		DX,TOWNSIO_VM_HOST_IF_CMD_STATUS
						OUT		DX,AL

						MOV		EDI,[EBP+8]
						CALL	XCHG_SPRITERAM

						POP		ES
						POPFD
						POPAD
						POP		EBP
						RET
VMFILE_WRITE_BATCH		ENDP



; EDI=Buffer Pointer
; ES=Sprite RAM Segment
; ESI, EAX, ECX destroyed
XCHG_SPRITERAM			PROC
						MOV		ESI,0
						MOV		ECX,SPRITERAM_SIZE
SPRITERAM_XCHG_LOOP:	MOV		EAX,ES:[ESI]
						MOV		EBX,[EDI]
						MOV		[EDI],EAX
						MOV		ES:[ESI],EBX
						LEA		ESI,[ESI+4]
						LEA		EDI,[EDI+4]
						LOOP	SPRITERAM_XCHG_LOOP
						RET
XCHG_SPRITERAM			ENDP


CODE					ENDS
						END
