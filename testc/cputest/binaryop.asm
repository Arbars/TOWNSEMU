						.386p
						ASSUME	CS:CODE

						PUBLIC	BINARYOP_REG_REG
						PUBLIC	BINARYOP_REG_MEM
						PUBLIC	BINARYOP_MEM_REG

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



EFLAGS_CF   	   		EQU		00001H
EFLAGS_PF   	  		EQU		00004H
EFLAGS_AF  				EQU		00010H
EFLAGS_ZF       		EQU		00040H
EFLAGS_SF       		EQU		00080H
EFLAGS_TRAP       		EQU		00100H
EFLAGS_IF 				EQU		00200H
EFLAGS_DF  				EQU		00400H
EFLAGS_OF  	 			EQU		00800H
EFLAGS_IOPL       		EQU		03000H
EFLAGS_NF   	  		EQU		04000H
EFLAGS_RF   	  		EQU		10000H
EFLAGS_VF		  		EQU		20000H
EFLAGS_ALIGN_CHECK		EQU		40000H



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;		ADC
;		ADD
;		AND
;		CMP
;		OR
;		SBB
;		SUB
;		XOR
;
;		EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

CODE					SEGMENT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; OP1, OP2 cannot be ECX
BINARYOP_TEST			MACRO	INST,OP1,OP2,DST,FLAGMASK

						INST	OP1,OP2
						PUSHFD
						POP		ECX
						AND		ECX,FLAGMASK

						MOV		[DST+8],ECX
						MOV		ECX,OP1
						MOV		[DST  ],ECX
						MOV		ECX,OP2
						MOV		[DST+4],ECX

						ENDM



BINARYOP_TEST16			MACRO	INST,OP1,OP2,RESOP1,RESOP2,DST,FLAGMASK

						INST	OP1,OP2
						PUSHFD
						POP		ECX
						AND		ECX,FLAGMASK

						MOV		[DST+8],ECX
						MOV		ECX,RESOP1
						MOV		[DST  ],ECX
						MOV		ECX,RESOP2
						MOV		[DST+4],ECX

						ENDM



; void BINARYOP_REG_REG(unsigned int res[72],unsigned int eax,unsigned int edx)
BINARYOP_REG_REG		PROC
						PUSH	EBP				; [EBP]=PrevEBP,  [EBP+4]=EIP,  [EIP+8]=ResultPtr,  [EIP+12]=EAX,  [EIP+16]=EDX
						MOV		EBP,ESP
						PUSHAD

						MOV		EDI,[EBP+8]
						STC

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	ADC,EAX,EDX,EDI,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	ADD,EAX,EDX,EDI+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	AND,EAX,EDX,EDI+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	CMP,EAX,EDX,EDI+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	OR ,EAX,EDX,EDI+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	SBB,EAX,EDX,EDI+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	SUB,EAX,EDX,EDI+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	XOR,EAX,EDX,EDI+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADC,AX,DX,EAX,EDX,EDI+96,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADD,AX,DX,EAX,EDX,EDI+96+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	AND,AX,DX,EAX,EDX,EDI+96+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	CMP,AX,DX,EAX,EDX,EDI+96+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	OR ,AX,DX,EAX,EDX,EDI+96+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SBB,AX,DX,EAX,EDX,EDI+96+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SUB,AX,DX,EAX,EDX,EDI+96+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	XOR,AX,DX,EAX,EDX,EDI+96+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADC,AL,DL,EAX,EDX,EDI+192,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADD,AL,DL,EAX,EDX,EDI+192+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	AND,AL,DL,EAX,EDX,EDI+192+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	CMP,AL,DL,EAX,EDX,EDI+192+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	OR ,AL,DL,EAX,EDX,EDI+192+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SBB,AL,DL,EAX,EDX,EDI+192+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SUB,AL,DL,EAX,EDX,EDI+192+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	XOR,AL,DL,EAX,EDX,EDI+192+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						POPAD
						POP		EBP
						RET
BINARYOP_REG_REG		ENDP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; void BINARYOP_REG_MEM(unsigned int res[72],unsigned int eax,unsigned int edx)
BINARYOP_REG_MEM		PROC
						PUSH	EBP				; [EBP]=PrevEBP,  [EBP+4]=EIP,  [EIP+8]=ResultPtr,  [EIP+12]=EAX,  [EIP+16]=EDX
						MOV		EBP,ESP
						PUSHAD

						MOV		EDI,[EBP+8]
						STC

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	ADC,EAX,[EBP+16],EDI,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	ADD,EAX,[EBP+16],EDI+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	AND,EAX,[EBP+16],EDI+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	CMP,EAX,[EBP+16],EDI+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	OR ,EAX,[EBP+16],EDI+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	SBB,EAX,[EBP+16],EDI+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	SUB,EAX,[EBP+16],EDI+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST	XOR,EAX,[EBP+16],EDI+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	ADC,AX,[EBP+16],EAX,[EBP+16],EDI+96,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	ADD,AX,[EBP+16],EAX,[EBP+16],EDI+96+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	AND,AX,[EBP+16],EAX,[EBP+16],EDI+96+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	CMP,AX,[EBP+16],EAX,[EBP+16],EDI+96+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	OR ,AX,[EBP+16],EAX,[EBP+16],EDI+96+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	SBB,AX,[EBP+16],EAX,[EBP+16],EDI+96+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	SUB,AX,[EBP+16],EAX,[EBP+16],EDI+96+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	XOR,AX,[EBP+16],EAX,[EBP+16],EDI+96+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	ADC,AL,[EBP+16],EAX,[EBP+16],EDI+192,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	ADD,AL,[EBP+16],EAX,[EBP+16],EDI+192+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	AND,AL,[EBP+16],EAX,[EBP+16],EDI+192+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	CMP,AL,[EBP+16],EAX,[EBP+16],EDI+192+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	OR ,AL,[EBP+16],EAX,[EBP+16],EDI+192+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	SBB,AL,[EBP+16],EAX,[EBP+16],EDI+192+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	SUB,AL,[EBP+16],EAX,[EBP+16],EDI+192+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12]
						BINARYOP_TEST16	XOR,AL,[EBP+16],EAX,[EBP+16],EDI+192+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						POPAD
						POP		EBP
						RET
BINARYOP_REG_MEM		ENDP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; void BINARYOP_MEM_REG(unsigned int res[72],unsigned int eax,unsigned int edx)
BINARYOP_MEM_REG		PROC
						PUSH	EBP				; [EBP]=PrevEBP,  [EBP+4]=EIP,  [EIP+8]=ResultPtr,  [EIP+12]=EAX,  [EIP+16]=EDX
						MOV		EBP,ESP
						SUB		ESP,4
						PUSHAD

						MOV		EDI,[EBP+8]
						STC

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	ADC,[EBP-4],EDX,EDI,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	ADD,[EBP-4],EDX,EDI+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	AND,[EBP-4],EDX,EDI+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	CMP,[EBP-4],EDX,EDI+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	OR ,[EBP-4],EDX,EDI+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	SBB,[EBP-4],EDX,EDI+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	SUB,[EBP-4],EDX,EDI+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST	XOR,[EBP-4],EDX,EDI+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADC,[EBP-4],DX,[EBP-4],EDX,EDI+96,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADD,[EBP-4],DX,[EBP-4],EDX,EDI+96+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	AND,[EBP-4],DX,[EBP-4],EDX,EDI+96+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	CMP,[EBP-4],DX,[EBP-4],EDX,EDI+96+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	OR ,[EBP-4],DX,[EBP-4],EDX,EDI+96+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SBB,[EBP-4],DX,[EBP-4],EDX,EDI+96+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SUB,[EBP-4],DX,[EBP-4],EDX,EDI+96+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	XOR,[EBP-4],DX,[EBP-4],EDX,EDI+96+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADC,[EBP-4],DL,[EBP-4],EDX,EDI+192,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	ADD,[EBP-4],DL,[EBP-4],EDX,EDI+192+12,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	AND,[EBP-4],DL,[EBP-4],EDX,EDI+192+24,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	CMP,[EBP-4],DL,[EBP-4],EDX,EDI+192+36,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	OR ,[EBP-4],DL,[EBP-4],EDX,EDI+192+48,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SBB,[EBP-4],DL,[EBP-4],EDX,EDI+192+60,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	SUB,[EBP-4],DL,[EBP-4],EDX,EDI+192+72,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_AF+EFLAGS_CF+EFLAGS_PF

						MOV		EAX,[EBP+12];
						MOV		[EBP-4],EAX
						MOV		EDX,[EBP+16]
						BINARYOP_TEST16	XOR,[EBP-4],DL,[EBP-4],EDX,EDI+192+84,EFLAGS_OF+EFLAGS_SF+EFLAGS_ZF+EFLAGS_CF+EFLAGS_PF


						POPAD
						MOV		ESP,EBP
						POP		EBP
						RET
BINARYOP_MEM_REG		ENDP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



CODE					ENDS
						END

