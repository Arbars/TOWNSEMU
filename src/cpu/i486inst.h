#ifndef I486INST_IS_INCLUDED
#define I486INST_IS_INCLUDED
/* { */


enum
{
	I486_OPCODE_NEED_SECOND_BYTE=0x0F,
	I486_OPCODE_NEED_SECOND_BYTE_AAD=0xD5,
	I486_OPCODE_NEED_SECOND_BYTE_AAM=0xD4,
};

// Adding support for a new instruction:
// Instruction-Set /digit means the real instruction depends on the REG bits of MODR/M byte (operand[0])
//  (1) Add OPCODE enum.
//  (2) Implement i486DX::FetchOperand
//  (3) Implement i486DX::Instruction::DecodeOperand
//  (4) Implement i486DX::Instruction::Disassemble
//  (5) Implement i486DX::RunOneInstruction
//  (6) Add disassembly test.


/*
0x80,0x81,0x83 can be:
ADD(REG=0)
OR(REG=1)
ADC(REG=2)
SBB(REG=3)
AND(REG=4)
SUB(REG=5)
XOR(REG=6)
CMP(REG=7)
	I486_OPCODE_BINARYOP_RM8_FROM_I8=  0x80, // AND(REG=4), OR(REG=1), or XOR(REG=6) depends on the REG field of MODR/M
	I486_OPCODE_BINARYOP_R_FROM_I=     0x81,
	I486_OPCODE_BINARYOP_RM_FROM_SXI8= 0x83,

0xF6,0xF7 can be:
TEST(REG=0)

0xFF can be:
JMP(REG=4,5)
CALL(REG=2,3)
*/


enum 
{
//	I486_OPCODE_

	I486_OPCODE_CLD=        0xFC,
	I486_OPCODE_CLI=        0xFA,


	I486_OPCODE_AND_AL_FROM_I8=  0x24,
	I486_OPCODE_AND_A_FROM_I=    0x25,
	I486_OPCODE_AND_RM8_FROM_R8= 0x20,
	I486_OPCODE_AND_RM_FROM_R=   0x21,
	I486_OPCODE_AND_R8_FROM_RM8= 0x22,
	I486_OPCODE_AND_R_FROM_RM=   0x23,


	I486_OPCODE_DEC_R_M8=   0xFE,
	I486_OPCODE_DEC_R_M=    0xFF,
	I486_OPCODE_DEC_EAX=    0x48, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_ECX=    0x49, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_EDX=    0x4A, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_EBX=    0x4B, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_ESP=    0x4C, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_EBP=    0x4D, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_ESI=    0x4E, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_DEC_EDI=    0x4F, // 16/32 depends on OPSIZE_OVERRIDE


	I486_OPCODE_IN_AL_I8=   0xE4,
	I486_OPCODE_IN_A_I8=    0xE5,
	I486_OPCODE_IN_AL_DX=   0xEC,
	I486_OPCODE_IN_A_DX=    0xED,


	I486_OPCODE_JA_SHORT=   0x77,
	I486_OPCODE_JAE_SHORT=  0x73,
	I486_OPCODE_JB_SHORT=   0x72,
	I486_OPCODE_JBE_SHORT=  0x76,
	// I486_OPCODE_JC_SHORT=   0x72, Same as JB_SHORT
	// I486_OPCODE_JCXZ_SHORT= 0xE3, Same as JCXZ_SHORT
	I486_OPCODE_JECXZ_SHORT=0xE3,  // Depending on the operand size?
	I486_OPCODE_JE_SHORT=   0x74,
	// I486_OPCODE_JZ_SHORT=   0x74, Same as JE_SHORT
	I486_OPCODE_JG_SHORT=   0x7F,
	I486_OPCODE_JGE_SHORT=  0x7D,
	I486_OPCODE_JL_SHORT=   0x7C,
	I486_OPCODE_JLE_SHORT=  0x7E,
	// I486_OPCODE_JNA_SHORT=  0x76, Same as JBE_SHORT
	// I486_OPCODE_JNAE_SHORT= 0x72, Same as JB_SHORT
	// I486_OPCODE_JNB_SHORT=  0x73, Same as JNC_SHORT
	// I486_OPCODE_JNBE_SHORT= 0x77, Same as JA_SHORT
	// I486_OPCODE_JNC_SHORT=  0x73, Same as JAE_SHORT
	I486_OPCODE_JNE_SHORT=  0x75,
	// I486_OPCODE_JNG_SHORT=  0x7E, Same as JLE_SHORT
	// I486_OPCODE_JNGE_SHORT= 0x7C, Same as JL_SHORT
	// I486_OPCODE_JNL_SHORT=  0x7D, Same as JGE_SHORT
	// I486_OPCODE_JNLE_SHORT= 0x7F, Same as JG_SHORT
	I486_OPCODE_JNO_SHORT=  0x71,
	I486_OPCODE_JNP_SHORT=  0x7B,
	I486_OPCODE_JNS_SHORT=  0x79,
	// I486_OPCODE_JNZ_SHORT=  0x75, Same as JNE_SHORT
	I486_OPCODE_JO_SHORT=   0x70,
	I486_OPCODE_JP_SHORT=   0x7A,
	// I486_OPCODE_JPE_SHORT=  0x7A, Same as JP_SHORT
	// I486_OPCODE_JPO_SHORT=  0x7B, Same as JNP_SHORT
	I486_OPCODE_JS_SHORT=   0x78,
	// I486_OPCODE_JZ_SHORT=   0x74, Same as JE_SHORT

	I486_OPCODE_JA_LONG=    0x870F,
	I486_OPCODE_JAE_LONG=   0x830F,
	I486_OPCODE_JB_LONG=    0x820F,
	I486_OPCODE_JBE_LONG=   0x860F,
	// I486_OPCODE_JC_LONG=    0x820F, Same as JB_LONG
	I486_OPCODE_JE_LONG=    0x840F,
	// I486_OPCODE_JZ_LONG=    0x840F, Same as JZ_LONG
	I486_OPCODE_JG_LONG=    0x8F0F,
	I486_OPCODE_JGE_LONG=   0x8D0F,
	I486_OPCODE_JL_LONG=    0x8C0F,

	I486_OPCODE_JLE_LONG=   0x8E0F,
	// I486_OPCODE_JNA_LONG=   0x860F, Same as JBE_LONG
	// I486_OPCODE_JNAE_LONG=  0x820F, Same as JB_LONG
	// I486_OPCODE_JNB_LONG=   0x830F, Same as JAE_LONG
	// I486_OPCODE_JNBE_LONG=  0x870F, Same as JA_LONG
	// I486_OPCODE_JNC_LONG=   0x830F, Same as JAE_LONG
	I486_OPCODE_JNE_LONG=   0x850F,
	// I486_OPCODE_JNG_LONG=   0x8E0F, Same as JLE_LONG
	// I486_OPCODE_JNGE_LONG=  0x8C0F, Same as JL_LONG
	// I486_OPCODE_JNL_LONG=   0x8D0F, Same as JGE_LONG
	// I486_OPCODE_JNLE_LONG=  0x8F0F, Same as JG_LONG
	I486_OPCODE_JNO_LONG=   0x810F,
	I486_OPCODE_JNP_LONG=   0x8B0F,
	I486_OPCODE_JNS_LONG=   0x890F,
	// I486_OPCODE_JNZ_LONG=   0x850F, Same as JNE_LONG
	I486_OPCODE_JO_LONG=    0x800F,
	I486_OPCODE_JP_LONG=    0x8A0F,
	// I486_OPCODE_JPE_LONG=   0x8A0F, Same as JP_LONG
	// I486_OPCODE_JPO_LONG=   0x8B0F, Same as JNP_LONG
	I486_OPCODE_JS_LONG=    0x880F,
	// I486_OPCODE_JZ_LONG=    0x840F, Same as JE_LONG
	


	I486_OPCODE_JMP_SHORT=        0xEB,   // cb
	I486_OPCODE_JMP_NEAR=         0xE9,   // cw or cd
	I486_OPCODE_JMP_NEAR_INDIRECT=0xFF,   // /4 or /5
	I486_OPCODE_JMP_FAR=          0xEA,   // cd or cp


	// AND, OR, or XOR
	I486_OPCODE_BINARYOP_RM8_FROM_I8=  0x80, // AND(REG=4), OR(REG=1), or XOR(REG=6) depends on the REG field of MODR/M
	I486_OPCODE_BINARYOP_R_FROM_I=     0x81,
	I486_OPCODE_BINARYOP_RM_FROM_SXI8= 0x83,


	I486_OPCODE_MOV_FROM_R8=      0x88,
	I486_OPCODE_MOV_FROM_R=       0x89, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_TO_R8=        0x8A,
	I486_OPCODE_MOV_TO_R=         0x8B, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_FROM_SEG=     0x8C,
	I486_OPCODE_MOV_TO_SEG=       0x8E,
	I486_OPCODE_MOV_M_TO_AL=      0xA0,
	I486_OPCODE_MOV_M_TO_EAX=     0xA1, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_M_FROM_AL=    0xA2,
	I486_OPCODE_MOV_M_FROM_EAX=   0xA3, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I8_TO_AL=     0xB0,
	I486_OPCODE_MOV_I8_TO_CL=     0xB1,
	I486_OPCODE_MOV_I8_TO_DL=     0xB2,
	I486_OPCODE_MOV_I8_TO_BL=     0xB3,
	I486_OPCODE_MOV_I8_TO_AH=     0xB4,
	I486_OPCODE_MOV_I8_TO_CH=     0xB5,
	I486_OPCODE_MOV_I8_TO_DH=     0xB6,
	I486_OPCODE_MOV_I8_TO_BH=     0xB7,
	I486_OPCODE_MOV_I_TO_EAX=     0xB8, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_ECX=     0xB9, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_EDX=     0xBA, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_EBX=     0xBB, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_ESP=     0xBC, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_EBP=     0xBD, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_ESI=     0xBE, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I_TO_EDI=     0xBF, // 16/32 depends on OPSIZE_OVERRIDE
	I486_OPCODE_MOV_I8_TO_RM8=    0xC6,
	I486_OPCODE_MOV_I_TO_RM=      0xC7, // 16/32 depends on OPSIZE_OVERRIDE


	I486_OPCODE_MOV_TO_CR=        0x220F,
	I486_OPCODE_MOV_FROM_CR=      0x200F,
	I486_OPCODE_MOV_FROM_DR=      0x210F,
	I486_OPCODE_MOV_TO_DR=        0x230F,
	I486_OPCODE_MOV_FROM_TR=      0x240F,
	I486_OPCODE_MOV_TO_TR=        0x260F,


	I486_OPCODE_OUT_I8_AL=        0xE6,
	I486_OPCODE_OUT_I8_A=         0xE7,
	I486_OPCODE_OUT_DX_AL=        0xEE,
	I486_OPCODE_OUT_DX_A=         0xEF,


	I486_OPCODE_XOR_AL_FROM_I8=   0x34,
	I486_OPCODE_XOR_A_FROM_I=     0x35,
	I486_OPCODE_XOR_RM8_FROM_R8=  0x30,
	I486_OPCODE_XOR_RM_FROM_R=    0x31,
	I486_OPCODE_XOR_R8_FROM_RM8=  0x32,
	I486_OPCODE_XOR_R_FROM_RM=    0x33,
};

/* } */
#endif
