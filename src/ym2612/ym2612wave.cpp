/* LICENSE>>
Copyright 2020 Soji Yamakawa (CaptainYS, http://www.ysflight.com)

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<< LICENSE */
#include <algorithm>
#include <iostream>
#include <cstring>

#include "ym2612.h"



// #define YM2612_DEBUGOUTPUT


/*static*/ int YM2612::MULTITable[16]= // Multiple x2.
{
	1,
	2,
	4,
	6,
	8,
	10,
	12,
	14,
	16,
	18,
	20,
	22,
	24,
	26,
	28,
	30,
};

static unsigned int attackTime0to96dB[64]= // 1/100ms
{
897024,//0,
897024,//0,
897024,//0,
897024,//0,
897024,
897024,
598016,
598016, // 7: 897024*2/3
448512, // 8: 897024/2           x=8->897024/(2^1)
358810, // 9: 897024*6/15
299008, //10: 897024/3
258293,
224256, //12: 897024/4           x=12->897024/(2^2)
173405,                 // <- 179405?
149504, //14: 897024/6
128146,

112128, //16: 897024/8           x=16->897024/(2^3)  -> 897024/(2^((x-4)/4))
83702,
74752,  // 897024/12
64073,
56064,  // 897024/16
44851,
37376,  // 897024/24
32037,
28032,  // 897024/32
22425,
18688,  // 897024/48
16018,
14016,
11213,
9344,
8009,

7008,
5806,
4872,
4005,
3504,
2903,
2335,
2002,
1752,
1402,
1168,
1001,
876,
701,
584,
501,

438,
350,
232,
250,
240,
192,
160,
137,
126,
101,
84,
72,
60,
60,
0,
0,
};
static unsigned int sustainDecayReleaseTime0to96dB[64]= // 1/100ms
{
12398592,//0,
12398592,//0,
12398592,//0,
12398592,//0,
12398592,
12398592,
8265726,
8265728,
5199296,
4953437,
4132864,
3542455,
3099648,
2479719,
2066432,
1771227,

1549824,
1239859,
1033215,
885614,
774912,
619930,
516608,
442807,
387455,
309965,
258304,
221403,
193728,
154982,
129152,
110702,

96864,
77491,
64576,
55351,
48432,
38745,
32298,
27675,
24216,
19373,
16144,
13938,
12108,
9686,
8072,
6919,

6054,
4843,
4056,
3459,
3027,
2422,
2018,
1730,
1514,
1211,
1009,
865,
757,
757,
757,
757,
};
static unsigned int attackTime10to90Percent[64]=
{
0,
0,
0,
0,
0,
468891,
333005,
333005,
249446,
200294,
166502,
141926,
124723,
100147,
83251,
70963,

62362,
50074,
41625,
35482,
31181,
25037,
20813,
17741,
15590,
12518,
10406,
8670,
7795,
6259,
5203,
4435,

3899,
3130,
2602,
2218,
1949,
1565,
1301,
1109,
974,
782,
650,
554,
497,
391,
325,
277,

241,
194,
165,
140,
125,
99,
92,
70,
61,
46,
37,
32,
26,
26,
0,
0,
};
static unsigned int sustainDecayReleaseTime10to90Percent[64]=
{
0,
0,
0,
0,
0,
2491484, // 5:
1658880, // 6:
1658880, // 7:
1247232, // 8: 2491484/2
998400,  // 9: 1996800/2
823440,  //10: 
712704,  //11:
623616,  //12: 2491484/4
498200,  //13: 1996800/4  499200?
414720,  //14: 
356352,  //15: 

311808,  //16: 2491484/8
249600,
207360,
178175,
155904,
124800,
103680,
89088,
77952,
62400,
51840,
44544,
38876,
31200,
25920,
22272,

19488,
15800,
12960,
11136,
9744,
7800,
6480,
5568,
4872,
3900,
3240,
2784,
2436,
1950,
1620,
1392,

1218,
975,
810,
696,
509,
480,
407,
350,
305,
243,
203,
173,
152,
152,
152,
152,
};

const struct YM2612::ConnectionToOutputSlot YM2612::connectionToOutputSlots[8]=
{
	{1,{3,-1,-1,-1}},
	{1,{3,-1,-1,-1}},
	{1,{3,-1,-1,-1}},
	{1,{3,-1,-1,-1}},
	{2,{1,3,-1,-1}},
	{3,{1,2,3,-1}},
	{3,{1,2,3,-1}},
	{4,{0,1,2,3}},
};

static unsigned int detune1000Table[]=
{
	   0,   0,  48,  95,
	   0,   0,  48,  95,
	   0,   0,  48,  95,
	   0,   0,  48,  95,
	   0,  48,  95,  95,
	   0,  48,  95, 143,
	   0,  48,  95, 143,
	   0,  48,  95, 143,
	   0,  48,  95, 191,
	   0,  48, 143, 191,

	   0,  48, 143, 191,
	   0,  48, 143, 238,
	   0,  95, 191, 238,
	   0,  95, 191, 286,
	   0,  95, 191, 288,
	   0,  95, 238, 334,
	   0,  85, 238, 381, // 85?
	   0, 143, 286, 381,
	   0, 143, 298, 429,
	   0, 143, 334, 477,

	   0, 191, 381, 525,
	   0, 191, 381, 572,
	   0, 191, 429, 620,
	   0, 238, 477, 668,
	   0, 238, 525, 763,
	   0, 286, 672, 811,
	   0, 286, 520, 906,
	   0, 334, 668, 354,
	   0, 391, 763,1049,
	   0, 391, 763,1049,

	   0, 391, 763,1049,
	   0, 391, 763,1049,
};

////////////////////////////////////////////////////////////

// YM3438 Application Manual tells the level increases exponentially during the attack phase.
// It doesn't tell exact function.  I've just made up one.
//    y=(1.0-pow(2.0,a*x))/(1.0-pow(2.0,a))
static unsigned int attackExp[]={
   0,   2,   5,   8,  11,  14,  17,  20,  23,  26,  29,  32,  35,  38,  41,  44,
  47,  49,  52,  55,  58,  61,  64,  67,  70,  73,  76,  79,  82,  84,  87,  90,
  93,  96,  99, 102, 105, 108, 110, 113, 116, 119, 122, 125, 128, 131, 133, 136,
 139, 142, 145, 148, 151, 153, 156, 159, 162, 165, 168, 171, 173, 176, 179, 182,
 185, 188, 190, 193, 196, 199, 202, 205, 207, 210, 213, 216, 219, 221, 224, 227,
 230, 233, 235, 238, 241, 244, 247, 249, 252, 255, 258, 261, 263, 266, 269, 272,
 274, 277, 280, 283, 285, 288, 291, 294, 296, 299, 302, 305, 308, 310, 313, 316,
 318, 321, 324, 327, 329, 332, 335, 338, 340, 343, 346, 349, 351, 354, 357, 359,
 362, 365, 368, 370, 373, 376, 378, 381, 384, 386, 389, 392, 395, 397, 400, 403,
 405, 408, 411, 413, 416, 419, 421, 424, 427, 429, 432, 435, 437, 440, 443, 445,
 448, 451, 453, 456, 459, 461, 464, 466, 469, 472, 474, 477, 480, 482, 485, 488,
 490, 493, 495, 498, 501, 503, 506, 509, 511, 514, 516, 519, 522, 524, 527, 529,
 532, 535, 537, 540, 542, 545, 548, 550, 553, 555, 558, 560, 563, 566, 568, 571,
 573, 576, 578, 581, 584, 586, 589, 591, 594, 596, 599, 601, 604, 607, 609, 612,
 614, 617, 619, 622, 624, 627, 629, 632, 634, 637, 640, 642, 645, 647, 650, 652,
 655, 657, 660, 662, 665, 667, 670, 672, 675, 677, 680, 682, 685, 687, 690, 692,
 695, 697, 700, 702, 705, 707, 710, 712, 714, 717, 719, 722, 724, 727, 729, 732,
 734, 737, 739, 742, 744, 746, 749, 751, 754, 756, 759, 761, 764, 766, 768, 771,
 773, 776, 778, 781, 783, 786, 788, 790, 793, 795, 798, 800, 802, 805, 807, 810,
 812, 814, 817, 819, 822, 824, 827, 829, 831, 834, 836, 838, 841, 843, 846, 848,
 850, 853, 855, 858, 860, 862, 865, 867, 869, 872, 874, 876, 879, 881, 884, 886,
 888, 891, 893, 895, 898, 900, 902, 905, 907, 909, 912, 914, 916, 919, 921, 923,
 926, 928, 930, 933, 935, 937, 940, 942, 944, 947, 949, 951, 954, 956, 958, 961,
 963, 965, 967, 970, 972, 974, 977, 979, 981, 984, 986, 988, 990, 993, 995, 997,
1000,1002,1004,1006,1009,1011,1013,1015,1018,1020,1022,1025,1027,1029,1031,1034,
1036,1038,1040,1043,1045,1047,1049,1052,1054,1056,1058,1061,1063,1065,1067,1070,
1072,1074,1076,1078,1081,1083,1085,1087,1090,1092,1094,1096,1098,1101,1103,1105,
1107,1109,1112,1114,1116,1118,1120,1123,1125,1127,1129,1131,1134,1136,1138,1140,
1142,1145,1147,1149,1151,1153,1155,1158,1160,1162,1164,1166,1168,1171,1173,1175,
1177,1179,1181,1184,1186,1188,1190,1192,1194,1197,1199,1201,1203,1205,1207,1209,
1212,1214,1216,1218,1220,1222,1224,1226,1229,1231,1233,1235,1237,1239,1241,1243,
1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1267,1269,1271,1273,1275,1277,
1279,1281,1283,1285,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,
1312,1315,1317,1319,1321,1323,1325,1327,1329,1331,1333,1335,1337,1339,1341,1343,
1345,1347,1349,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,
1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,
1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,
1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,
1474,1476,1477,1479,1481,1483,1485,1487,1489,1491,1493,1495,1497,1499,1501,1503,
1505,1507,1509,1511,1512,1514,1516,1518,1520,1522,1524,1526,1528,1530,1532,1534,
1536,1537,1539,1541,1543,1545,1547,1549,1551,1553,1555,1557,1558,1560,1562,1564,
1566,1568,1570,1572,1574,1576,1577,1579,1581,1583,1585,1587,1589,1591,1593,1594,
1596,1598,1600,1602,1604,1606,1608,1609,1611,1613,1615,1617,1619,1621,1622,1624,
1626,1628,1630,1632,1634,1635,1637,1639,1641,1643,1645,1646,1648,1650,1652,1654,
1656,1658,1659,1661,1663,1665,1667,1669,1670,1672,1674,1676,1678,1679,1681,1683,
1685,1687,1689,1690,1692,1694,1696,1698,1699,1701,1703,1705,1707,1708,1710,1712,
1714,1716,1717,1719,1721,1723,1725,1726,1728,1730,1732,1734,1735,1737,1739,1741,
1742,1744,1746,1748,1750,1751,1753,1755,1757,1758,1760,1762,1764,1765,1767,1769,
1771,1772,1774,1776,1778,1779,1781,1783,1785,1786,1788,1790,1792,1793,1795,1797,
1799,1800,1802,1804,1806,1807,1809,1811,1813,1814,1816,1818,1819,1821,1823,1825,
1826,1828,1830,1832,1833,1835,1837,1838,1840,1842,1844,1845,1847,1849,1850,1852,
1854,1855,1857,1859,1861,1862,1864,1866,1867,1869,1871,1872,1874,1876,1877,1879,
1881,1883,1884,1886,1888,1889,1891,1893,1894,1896,1898,1899,1901,1903,1904,1906,
1908,1909,1911,1913,1914,1916,1918,1919,1921,1923,1924,1926,1928,1929,1931,1933,
1934,1936,1937,1939,1941,1942,1944,1946,1947,1949,1951,1952,1954,1955,1957,1959,
1960,1962,1964,1965,1967,1969,1970,1972,1973,1975,1977,1978,1980,1981,1983,1985,
1986,1988,1990,1991,1993,1994,1996,1998,1999,2001,2002,2004,2006,2007,2009,2010,
2012,2014,2015,2017,2018,2020,2022,2023,2025,2026,2028,2029,2031,2033,2034,2036,
2037,2039,2041,2042,2044,2045,2047,2048,2050,2052,2053,2055,2056,2058,2059,2061,
2062,2064,2066,2067,2069,2070,2072,2073,2075,2076,2078,2080,2081,2083,2084,2086,
2087,2089,2090,2092,2093,2095,2097,2098,2100,2101,2103,2104,2106,2107,2109,2110,
2112,2113,2115,2116,2118,2120,2121,2123,2124,2126,2127,2129,2130,2132,2133,2135,
2136,2138,2139,2141,2142,2144,2145,2147,2148,2150,2151,2153,2154,2156,2157,2159,
2160,2162,2163,2165,2166,2168,2169,2171,2172,2174,2175,2177,2178,2180,2181,2183,
2184,2186,2187,2188,2190,2191,2193,2194,2196,2197,2199,2200,2202,2203,2205,2206,
2208,2209,2210,2212,2213,2215,2216,2218,2219,2221,2222,2224,2225,2226,2228,2229,
2231,2232,2234,2235,2237,2238,2240,2241,2242,2244,2245,2247,2248,2250,2251,2252,
2254,2255,2257,2258,2260,2261,2262,2264,2265,2267,2268,2270,2271,2272,2274,2275,
2277,2278,2279,2281,2282,2284,2285,2287,2288,2289,2291,2292,2294,2295,2296,2298,
2299,2301,2302,2303,2305,2306,2308,2309,2310,2312,2313,2315,2316,2317,2319,2320,
2321,2323,2324,2326,2327,2328,2330,2331,2333,2334,2335,2337,2338,2339,2341,2342,
2344,2345,2346,2348,2349,2350,2352,2353,2354,2356,2357,2359,2360,2361,2363,2364,
2365,2367,2368,2369,2371,2372,2373,2375,2376,2378,2379,2380,2382,2383,2384,2386,
2387,2388,2390,2391,2392,2394,2395,2396,2398,2399,2400,2402,2403,2404,2406,2407,
2408,2410,2411,2412,2414,2415,2416,2418,2419,2420,2421,2423,2424,2425,2427,2428,
2429,2431,2432,2433,2435,2436,2437,2439,2440,2441,2442,2444,2445,2446,2448,2449,
2450,2452,2453,2454,2455,2457,2458,2459,2461,2462,2463,2465,2466,2467,2468,2470,
2471,2472,2474,2475,2476,2477,2479,2480,2481,2482,2484,2485,2486,2488,2489,2490,
2491,2493,2494,2495,2496,2498,2499,2500,2502,2503,2504,2505,2507,2508,2509,2510,
2512,2513,2514,2515,2517,2518,2519,2520,2522,2523,2524,2525,2527,2528,2529,2530,
2532,2533,2534,2535,2537,2538,2539,2540,2542,2543,2544,2545,2546,2548,2549,2550,
2551,2553,2554,2555,2556,2558,2559,2560,2561,2562,2564,2565,2566,2567,2569,2570,
2571,2572,2573,2575,2576,2577,2578,2579,2581,2582,2583,2584,2586,2587,2588,2589,
2590,2592,2593,2594,2595,2596,2598,2599,2600,2601,2602,2604,2605,2606,2607,2608,
2609,2611,2612,2613,2614,2615,2617,2618,2619,2620,2621,2623,2624,2625,2626,2627,
2628,2630,2631,2632,2633,2634,2635,2637,2638,2639,2640,2641,2643,2644,2645,2646,
2647,2648,2650,2651,2652,2653,2654,2655,2656,2658,2659,2660,2661,2662,2663,2665,
2666,2667,2668,2669,2670,2671,2673,2674,2675,2676,2677,2678,2679,2681,2682,2683,
2684,2685,2686,2687,2689,2690,2691,2692,2693,2694,2695,2697,2698,2699,2700,2701,
2702,2703,2704,2706,2707,2708,2709,2710,2711,2712,2713,2715,2716,2717,2718,2719,
2720,2721,2722,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2735,2736,2737,
2738,2739,2740,2741,2742,2743,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,
2755,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2769,2770,2771,2772,
2773,2774,2775,2776,2777,2778,2779,2780,2781,2783,2784,2785,2786,2787,2788,2789,
2790,2791,2792,2793,2794,2795,2796,2798,2799,2800,2801,2802,2803,2804,2805,2806,
2807,2808,2809,2810,2811,2812,2813,2814,2815,2817,2818,2819,2820,2821,2822,2823,
2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,
2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,
2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,
2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,
2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,
2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,
2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,
2937,2938,2939,2940,2941,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,
2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2964,2965,2966,
2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2981,
2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2995,2996,
2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3008,3009,3010,3011,
3012,3013,3014,3015,3016,3017,3018,3019,3019,3020,3021,3022,3023,3024,3025,3026,
3027,3028,3029,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3038,3039,3040,
3041,3042,3043,3044,3045,3046,3047,3047,3048,3049,3050,3051,3052,3053,3054,3055,
3055,3056,3057,3058,3059,3060,3061,3062,3063,3063,3064,3065,3066,3067,3068,3069,
3070,3071,3071,3072,3073,3074,3075,3076,3077,3078,3078,3079,3080,3081,3082,3083,
3084,3084,3085,3086,3087,3088,3089,3090,3091,3091,3092,3093,3094,3095,3096,3097,
3097,3098,3099,3100,3101,3102,3103,3103,3104,3105,3106,3107,3108,3109,3109,3110,
3111,3112,3113,3114,3115,3115,3116,3117,3118,3119,3120,3120,3121,3122,3123,3124,
3125,3126,3126,3127,3128,3129,3130,3131,3131,3132,3133,3134,3135,3136,3136,3137,
3138,3139,3140,3141,3141,3142,3143,3144,3145,3146,3146,3147,3148,3149,3150,3151,
3151,3152,3153,3154,3155,3155,3156,3157,3158,3159,3160,3160,3161,3162,3163,3164,
3164,3165,3166,3167,3168,3169,3169,3170,3171,3172,3173,3173,3174,3175,3176,3177,
3177,3178,3179,3180,3181,3181,3182,3183,3184,3185,3185,3186,3187,3188,3189,3189,
3190,3191,3192,3193,3193,3194,3195,3196,3197,3197,3198,3199,3200,3201,3201,3202,
3203,3204,3205,3205,3206,3207,3208,3208,3209,3210,3211,3212,3212,3213,3214,3215,
3216,3216,3217,3218,3219,3219,3220,3221,3222,3223,3223,3224,3225,3226,3226,3227,
3228,3229,3229,3230,3231,3232,3233,3233,3234,3235,3236,3236,3237,3238,3239,3239,
3240,3241,3242,3243,3243,3244,3245,3246,3246,3247,3248,3249,3249,3250,3251,3252,
3252,3253,3254,3255,3255,3256,3257,3258,3258,3259,3260,3261,3261,3262,3263,3264,
3264,3265,3266,3267,3267,3268,3269,3270,3270,3271,3272,3273,3273,3274,3275,3276,
3276,3277,3278,3279,3279,3280,3281,3281,3282,3283,3284,3284,3285,3286,3287,3287,
3288,3289,3290,3290,3291,3292,3292,3293,3294,3295,3295,3296,3297,3298,3298,3299,
3300,3300,3301,3302,3303,3303,3304,3305,3305,3306,3307,3308,3308,3309,3310,3311,
3311,3312,3313,3313,3314,3315,3316,3316,3317,3318,3318,3319,3320,3320,3321,3322,
3323,3323,3324,3325,3325,3326,3327,3328,3328,3329,3330,3330,3331,3332,3332,3333,
3334,3335,3335,3336,3337,3337,3338,3339,3339,3340,3341,3342,3342,3343,3344,3344,
3345,3346,3346,3347,3348,3348,3349,3350,3351,3351,3352,3353,3353,3354,3355,3355,
3356,3357,3357,3358,3359,3359,3360,3361,3362,3362,3363,3364,3364,3365,3366,3366,
3367,3368,3368,3369,3370,3370,3371,3372,3372,3373,3374,3374,3375,3376,3376,3377,
3378,3378,3379,3380,3380,3381,3382,3382,3383,3384,3384,3385,3386,3386,3387,3388,
3388,3389,3390,3390,3391,3392,3392,3393,3394,3394,3395,3396,3396,3397,3398,3398,
3399,3400,3400,3401,3402,3402,3403,3404,3404,3405,3406,3406,3407,3407,3408,3409,
3409,3410,3411,3411,3412,3413,3413,3414,3415,3415,3416,3417,3417,3418,3418,3419,
3420,3420,3421,3422,3422,3423,3424,3424,3425,3426,3426,3427,3427,3428,3429,3429,
3430,3431,3431,3432,3433,3433,3434,3434,3435,3436,3436,3437,3438,3438,3439,3439,
3440,3441,3441,3442,3443,3443,3444,3444,3445,3446,3446,3447,3448,3448,3449,3449,
3450,3451,3451,3452,3453,3453,3454,3454,3455,3456,3456,3457,3458,3458,3459,3459,
3460,3461,3461,3462,3462,3463,3464,3464,3465,3465,3466,3467,3467,3468,3469,3469,
3470,3470,3471,3472,3472,3473,3473,3474,3475,3475,3476,3476,3477,3478,3478,3479,
3479,3480,3481,3481,3482,3482,3483,3484,3484,3485,3485,3486,3487,3487,3488,3488,
3489,3490,3490,3491,3491,3492,3493,3493,3494,3494,3495,3496,3496,3497,3497,3498,
3498,3499,3500,3500,3501,3501,3502,3503,3503,3504,3504,3505,3506,3506,3507,3507,
3508,3508,3509,3510,3510,3511,3511,3512,3513,3513,3514,3514,3515,3515,3516,3517,
3517,3518,3518,3519,3519,3520,3521,3521,3522,3522,3523,3523,3524,3525,3525,3526,
3526,3527,3527,3528,3529,3529,3530,3530,3531,3531,3532,3533,3533,3534,3534,3535,
3535,3536,3537,3537,3538,3538,3539,3539,3540,3540,3541,3542,3542,3543,3543,3544,
3544,3545,3545,3546,3547,3547,3548,3548,3549,3549,3550,3550,3551,3552,3552,3553,
3553,3554,3554,3555,3555,3556,3557,3557,3558,3558,3559,3559,3560,3560,3561,3561,
3562,3563,3563,3564,3564,3565,3565,3566,3566,3567,3567,3568,3569,3569,3570,3570,
3571,3571,3572,3572,3573,3573,3574,3574,3575,3576,3576,3577,3577,3578,3578,3579,
3579,3580,3580,3581,3581,3582,3583,3583,3584,3584,3585,3585,3586,3586,3587,3587,
3588,3588,3589,3589,3590,3590,3591,3591,3592,3593,3593,3594,3594,3595,3595,3596,
3596,3597,3597,3598,3598,3599,3599,3600,3600,3601,3601,3602,3602,3603,3604,3604,
3605,3605,3606,3606,3607,3607,3608,3608,3609,3609,3610,3610,3611,3611,3612,3612,
3613,3613,3614,3614,3615,3615,3616,3616,3617,3617,3618,3618,3619,3619,3620,3620,
3621,3621,3622,3622,3623,3623,3624,3624,3625,3625,3626,3626,3627,3627,3628,3628,
3629,3629,3630,3630,3631,3631,3632,3632,3633,3633,3634,3634,3635,3635,3636,3636,
3637,3637,3638,3638,3639,3639,3640,3640,3641,3641,3642,3642,3643,3643,3644,3644,
3645,3645,3646,3646,3647,3647,3648,3648,3649,3649,3650,3650,3651,3651,3652,3652,
3653,3653,3654,3654,3655,3655,3656,3656,3656,3657,3657,3658,3658,3659,3659,3660,
3660,3661,3661,3662,3662,3663,3663,3664,3664,3665,3665,3666,3666,3667,3667,3667,
3668,3668,3669,3669,3670,3670,3671,3671,3672,3672,3673,3673,3674,3674,3675,3675,
3675,3676,3676,3677,3677,3678,3678,3679,3679,3680,3680,3681,3681,3682,3682,3682,
3683,3683,3684,3684,3685,3685,3686,3686,3687,3687,3688,3688,3689,3689,3689,3690,
3690,3691,3691,3692,3692,3693,3693,3694,3694,3694,3695,3695,3696,3696,3697,3697,
3698,3698,3699,3699,3699,3700,3700,3701,3701,3702,3702,3703,3703,3704,3704,3704,
3705,3705,3706,3706,3707,3707,3708,3708,3708,3709,3709,3710,3710,3711,3711,3712,
3712,3712,3713,3713,3714,3714,3715,3715,3716,3716,3716,3717,3717,3718,3718,3719,
3719,3720,3720,3720,3721,3721,3722,3722,3723,3723,3723,3724,3724,3725,3725,3726,
3726,3727,3727,3727,3728,3728,3729,3729,3730,3730,3730,3731,3731,3732,3732,3733,
3733,3733,3734,3734,3735,3735,3736,3736,3736,3737,3737,3738,3738,3739,3739,3739,
3740,3740,3741,3741,3742,3742,3742,3743,3743,3744,3744,3745,3745,3745,3746,3746,
3747,3747,3747,3748,3748,3749,3749,3750,3750,3750,3751,3751,3752,3752,3753,3753,
3753,3754,3754,3755,3755,3755,3756,3756,3757,3757,3757,3758,3758,3759,3759,3760,
3760,3760,3761,3761,3762,3762,3762,3763,3763,3764,3764,3764,3765,3765,3766,3766,
3767,3767,3767,3768,3768,3769,3769,3769,3770,3770,3771,3771,3771,3772,3772,3773,
3773,3773,3774,3774,3775,3775,3775,3776,3776,3777,3777,3777,3778,3778,3779,3779,
3779,3780,3780,3781,3781,3781,3782,3782,3783,3783,3783,3784,3784,3785,3785,3785,
3786,3786,3787,3787,3787,3788,3788,3789,3789,3789,3790,3790,3790,3791,3791,3792,
3792,3792,3793,3793,3794,3794,3794,3795,3795,3796,3796,3796,3797,3797,3797,3798,
3798,3799,3799,3799,3800,3800,3801,3801,3801,3802,3802,3802,3803,3803,3804,3804,
3804,3805,3805,3806,3806,3806,3807,3807,3807,3808,3808,3809,3809,3809,3810,3810,
3810,3811,3811,3812,3812,3812,3813,3813,3813,3814,3814,3815,3815,3815,3816,3816,
3816,3817,3817,3818,3818,3818,3819,3819,3819,3820,3820,3821,3821,3821,3822,3822,
3822,3823,3823,3824,3824,3824,3825,3825,3825,3826,3826,3826,3827,3827,3828,3828,
3828,3829,3829,3829,3830,3830,3831,3831,3831,3832,3832,3832,3833,3833,3833,3834,
3834,3834,3835,3835,3836,3836,3836,3837,3837,3837,3838,3838,3838,3839,3839,3840,
3840,3840,3841,3841,3841,3842,3842,3842,3843,3843,3843,3844,3844,3845,3845,3845,
3846,3846,3846,3847,3847,3847,3848,3848,3848,3849,3849,3849,3850,3850,3851,3851,
3851,3852,3852,3852,3853,3853,3853,3854,3854,3854,3855,3855,3855,3856,3856,3856,
3857,3857,3857,3858,3858,3859,3859,3859,3860,3860,3860,3861,3861,3861,3862,3862,
3862,3863,3863,3863,3864,3864,3864,3865,3865,3865,3866,3866,3866,3867,3867,3867,
3868,3868,3868,3869,3869,3869,3870,3870,3870,3871,3871,3871,3872,3872,3872,3873,
3873,3873,3874,3874,3874,3875,3875,3875,3876,3876,3876,3877,3877,3877,3878,3878,
3878,3879,3879,3879,3880,3880,3880,3881,3881,3881,3882,3882,3882,3883,3883,3883,
3884,3884,3884,3885,3885,3885,3886,3886,3886,3887,3887,3887,3888,3888,3888,3889,
3889,3889,3890,3890,3890,3891,3891,3891,3892,3892,3892,3893,3893,3893,3894,3894,
3894,3894,3895,3895,3895,3896,3896,3896,3897,3897,3897,3898,3898,3898,3899,3899,
3899,3900,3900,3900,3901,3901,3901,3901,3902,3902,3902,3903,3903,3903,3904,3904,
3904,3905,3905,3905,3906,3906,3906,3907,3907,3907,3907,3908,3908,3908,3909,3909,
3909,3910,3910,3910,3911,3911,3911,3911,3912,3912,3912,3913,3913,3913,3914,3914,
3914,3915,3915,3915,3916,3916,3916,3916,3917,3917,3917,3918,3918,3918,3919,3919,
3919,3919,3920,3920,3920,3921,3921,3921,3922,3922,3922,3922,3923,3923,3923,3924,
3924,3924,3925,3925,3925,3926,3926,3926,3926,3927,3927,3927,3928,3928,3928,3928,
3929,3929,3929,3930,3930,3930,3931,3931,3931,3931,3932,3932,3932,3933,3933,3933,
3934,3934,3934,3934,3935,3935,3935,3936,3936,3936,3936,3937,3937,3937,3938,3938,
3938,3939,3939,3939,3939,3940,3940,3940,3941,3941,3941,3941,3942,3942,3942,3943,
3943,3943,3943,3944,3944,3944,3945,3945,3945,3945,3946,3946,3946,3947,3947,3947,
3947,3948,3948,3948,3949,3949,3949,3949,3950,3950,3950,3951,3951,3951,3951,3952,
3952,3952,3953,3953,3953,3953,3954,3954,3954,3955,3955,3955,3955,3956,3956,3956,
3956,3957,3957,3957,3958,3958,3958,3958,3959,3959,3959,3960,3960,3960,3960,3961,
3961,3961,3961,3962,3962,3962,3963,3963,3963,3963,3964,3964,3964,3964,3965,3965,
3965,3966,3966,3966,3966,3967,3967,3967,3967,3968,3968,3968,3969,3969,3969,3969,
3970,3970,3970,3970,3971,3971,3971,3972,3972,3972,3972,3973,3973,3973,3973,3974,
3974,3974,3974,3975,3975,3975,3976,3976,3976,3976,3977,3977,3977,3977,3978,3978,
3978,3978,3979,3979,3979,3980,3980,3980,3980,3981,3981,3981,3981,3982,3982,3982,
3982,3983,3983,3983,3983,3984,3984,3984,3984,3985,3985,3985,3986,3986,3986,3986,
3987,3987,3987,3987,3988,3988,3988,3988,3989,3989,3989,3989,3990,3990,3990,3990,
3991,3991,3991,3991,3992,3992,3992,3992,3993,3993,3993,3993,3994,3994,3994,3994,
3995,3995,3995,3995,3996,3996,3996,3997,3997,3997,3997,3998,3998,3998,3998,3999,
3999,3999,3999,4000,4000,4000,4000,4001,4001,4001,4001,4002,4002,4002,4002,4003,
4003,4003,4003,4003,4004,4004,4004,4004,4005,4005,4005,4005,4006,4006,4006,4006,
4007,4007,4007,4007,4008,4008,4008,4008,4009,4009,4009,4009,4010,4010,4010,4010,
4011,4011,4011,4011,4012,4012,4012,4012,4013,4013,4013,4013,4013,4014,4014,4014,
4014,4015,4015,4015,4015,4016,4016,4016,4016,4017,4017,4017,4017,4018,4018,4018,
4018,4018,4019,4019,4019,4019,4020,4020,4020,4020,4021,4021,4021,4021,4022,4022,
4022,4022,4022,4023,4023,4023,4023,4024,4024,4024,4024,4025,4025,4025,4025,4026,
4026,4026,4026,4026,4027,4027,4027,4027,4028,4028,4028,4028,4029,4029,4029,4029,
4029,4030,4030,4030,4030,4031,4031,4031,4031,4032,4032,4032,4032,4032,4033,4033,
4033,4033,4034,4034,4034,4034,4034,4035,4035,4035,4035,4036,4036,4036,4036,4036,
4037,4037,4037,4037,4038,4038,4038,4038,4039,4039,4039,4039,4039,4040,4040,4040,
4040,4041,4041,4041,4041,4041,4042,4042,4042,4042,4043,4043,4043,4043,4043,4044,
4044,4044,4044,4044,4045,4045,4045,4045,4046,4046,4046,4046,4046,4047,4047,4047,
4047,4048,4048,4048,4048,4048,4049,4049,4049,4049,4049,4050,4050,4050,4050,4051,
4051,4051,4051,4051,4052,4052,4052,4052,4053,4053,4053,4053,4053,4054,4054,4054,
4054,4054,4055,4055,4055,4055,4055,4056,4056,4056,4056,4057,4057,4057,4057,4057,
4058,4058,4058,4058,4058,4059,4059,4059,4059,4059,4060,4060,4060,4060,4061,4061,
4061,4061,4061,4062,4062,4062,4062,4062,4063,4063,4063,4063,4063,4064,4064,4064,
4064,4064,4065,4065,4065,4065,4065,4066,4066,4066,4066,4067,4067,4067,4067,4067,
4068,4068,4068,4068,4068,4069,4069,4069,4069,4069,4070,4070,4070,4070,4070,4071,
4071,4071,4071,4071,4072,4072,4072,4072,4072,4073,4073,4073,4073,4073,4074,4074,
4074,4074,4074,4075,4075,4075,4075,4075,4076,4076,4076,4076,4076,4077,4077,4077,
4077,4077,4078,4078,4078,4078,4078,4079,4079,4079,4079,4079,4080,4080,4080,4080,
4080,4081,4081,4081,4081,4081,4081,4082,4082,4082,4082,4082,4083,4083,4083,4083,
4083,4084,4084,4084,4084,4084,4085,4085,4085,4085,4085,4086,4086,4086,4086,4086,
4086,4087,4087,4087,4087,4087,4088,4088,4088,4088,4088,4089,4089,4089,4089,4089,
4090,4090,4090,4090,4090,4090,4091,4091,4091,4091,4091,4092,4092,4092,4092,4092,
4093,4093,4093,4093,4093,4093,4094,4094,4094,4094,4094,4095,4095,4095,4095,4095,
};
////////////////////////////////////////////////////////////



static unsigned int LFOCycleMicroSec[8]=
{
	100000000/ 398, // 1000000/ 3.98,
	100000000/ 556, // 1000000/ 5.56,
	100000000/ 602, // 1000000/ 6.02,
	100000000/ 637, // 1000000/ 6.37,
	100000000/ 688, // 1000000/ 6.88,
	100000000/ 963, // 1000000/ 9.63,
	100000000/4810, // 1000000/48.10,
	100000000/7220  // 1000000/72.20
};

// Definition of cent.
// https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%B3%E3%83%88_(%E9%9F%B3%E6%A5%BD)
static int PMS16384Table[8]=
{
  0,
 32,// scale(3.400000)=1.001966, (1.001966-1.0)*16384.0=32
 63,// scale(6.700000)=1.003878, (1.003878-1.0)*16384.0=63
 94,// scale(10.000000)=1.005793, (1.005793-1.0)*16384.0=94
133,// scale(14.000000)=1.008120, (1.008120-1.0)*16384.0=133
190,// scale(20.000000)=1.011619, (1.011619-1.0)*16384.0=190
382,// scale(40.000000)=1.023374, (1.023374-1.0)*16384.0=382
774,// scale(80.000000)=1.047294, (1.047294-1.0)*16384.0=774
};

// dB=20log10(P/Pref)
// 0=20log10(P/Pref) -> P/Pref=1.0
// 1.4=20log10(P/Pref) -> 10^(1.4/20)=P/Pref -> 
// 5.9=20log10(P/Pref) -> 10^(5.9/20)=P/Pref ->
// 11.8=20log10(P/Pref) -> 10^(11.8/20)=P/Pref ->
static int AMS4096Table[4]=
{
 4096-4096,  // 1.0
 4812-4096,  // 1.1749
 8079-4096,  // 1.97242
15935-4096, // 3.89045
};

////////////////////////////////////////////////////////////

inline int YM2612::Slot::UnscaledOutput(int phase,int phaseShift) const
{
	// phaseShift is input from the upstream slot.
	// -4096 to 4096.  4096 should be counted as 8pi.
	// UNSCALED_MAX is 2048. therefore 8x.

	//phaseShift*=MULTITable[this->MULTI];
	//phaseShift>>=1;

	//                     8.0       * (2PI / 2)     /   1.0
	const int outputScale=SLOTOUT_TO_NPI*(PHASE_STEPS/2)/UNSCALED_MAX;
	return sineTable[(phase+(phaseShift*outputScale))&PHASE_MASK];
}
inline int YM2612::Slot::UnscaledOutput(int phase,int phaseShift,unsigned int FB,int lastSlot0Out) const
{
	if(0!=FB)
	{
		static const int FBScaleTable[]=
		{
			0,1,2,4,8,16,32,64
		};
		// lastSlotOut=1.0=>4096   4096=>2PI
		// To make it 4PI at FB=4, must divide by 32.
		phase+=(lastSlot0Out*FBScaleTable[FB]/32);
	}
	//                     8.0       * (2PI / 2)     /   1.0
	const int outputScale=SLOTOUT_TO_NPI*(PHASE_STEPS/2)/UNSCALED_MAX;
	return sineTable[(phase+(phaseShift*outputScale))&PHASE_MASK];
}
inline int YM2612::Slot::EnvelopedOutputDb(int phase,int phaseShift,unsigned int timeInMS,unsigned int FB,int lastSlot0Out) const
{
	int dB=InterpolateEnvelope(timeInMS);
	lastDb100Cache=dB;
	unsigned int ampl=DB100to4095Scale[dB];
	int unscaledOut=UnscaledOutput(phase,phaseShift,FB,lastSlot0Out);
	return (unscaledOut*ampl)/4096;
}
inline int YM2612::Slot::EnvelopedOutputDb(int phase,int phaseShift,unsigned int timeInMS) const
{
	int dB=InterpolateEnvelope(timeInMS);
	lastDb100Cache=dB;
	unsigned int ampl=DB100to4095Scale[dB];
	int unscaledOut=UnscaledOutput(phase,phaseShift);
	return (unscaledOut*ampl)/4096;
}
inline int YM2612::Slot::EnvelopedOutputLn(int phase,int phaseShift,unsigned int timeInMS,unsigned int FB,int lastSlot0Out) const
{
	int env=InterpolateEnvelope(timeInMS);
	lastDb100Cache=env;
	unsigned int ampl=linear9600to4096[env];
	int unscaledOut=UnscaledOutput(phase,phaseShift,FB,lastSlot0Out);
	return (unscaledOut*ampl)/4096;
}
inline int YM2612::Slot::EnvelopedOutputLn(int phase,int phaseShift,unsigned int timeInMS) const
{
	int env=InterpolateEnvelope(timeInMS);
	lastDb100Cache=env;
	unsigned int ampl=linear9600to4096[env];
	int unscaledOut=UnscaledOutput(phase,phaseShift);
	return (unscaledOut*ampl)/4096;
}
inline int YM2612::Slot::InterpolateEnvelope(unsigned int timeInMS) const
{
	if(true!=InReleasePhase)
	{
		if(timeInMS<env[0]) // Attack
		{
			unsigned int x=4096*timeInMS/env[0];
			return (env[1]*attackExp[x])>>12;
		}
		else
		{
			timeInMS-=env[0];
			if(timeInMS<env[2])
			{
				return env[1]-(env[1]-env[3])*timeInMS/env[2];
			}
			else
			{
				timeInMS-=env[2];
				if(timeInMS<env[4])
				{
					return env[3]-env[3]*timeInMS/env[4];
				}
			}
		}
		return 0;
	}
	else
	{
		if(timeInMS<ReleaseEndTime && ReleaseStartTime<ReleaseEndTime)
		{
			auto diff=ReleaseEndTime-timeInMS;
			auto Db100=ReleaseStartDb100;
			Db100*=diff;
			Db100/=(ReleaseEndTime-ReleaseStartTime);
			return Db100;
		}
		return 0; // Not supported yet.
	}
}

////////////////////////////////////////////////////////////

void YM2612::KeyOn(unsigned int chNum)
{
	auto &ch=state.channels[chNum];

	const unsigned int hertzX16=BLOCK_FNUM_to_FreqX16(ch.BLOCK,ch.F_NUM);

	state.playingCh|=(1<<chNum);
	ch.playState=CH_PLAYING;
	ch.microsec12=0;
	ch.lastSlot0Out=0;
	ch.feedbackUpdateCycle=initialFeedbackUpdateCycle;


	// Formula [2] pp.204
	// There is an error.  F_NUM is 11bits.  There is no F11.
	// Probably, F11, F10, F9, F8 should be read F10, F9, F8, F7.
	unsigned int F10=((ch.F_NUM>>10)&1);
	unsigned int F9= ((ch.F_NUM>> 9)&1);
	unsigned int F8= ((ch.F_NUM>> 8)&1);
	unsigned int F7=((ch.F_NUM>>11)&1);
	unsigned int N3=(F10&(F9|F8|F7))|((~F10)&F9&F8&F7);
	unsigned int NOTE=(F10<<1)|N3;

	// Formulat in [2] pp.204 suggests:
 	//   unsigned int KC=(ch.BLOCK<<2)|NOTE;
	// which doesn't make sense.
	// SEGA Genesis Software Manaual tells KC is just top 5 bits of BLOCK|F_NUM2.
	// Which makes more sense.
	unsigned int KC=(ch.BLOCK<<2)|((ch.F_NUM>>9)&3);


	for(auto &slot : ch.slots)
	{
		slot.InReleasePhase=false;
		slot.lastDb100Cache=0;
		slot.phase12=0;

		// Hz ranges 1 to roughly 8000.  PHASE_STEPS=4096.  hertz*PHASE_STEPS=2^13*2^12=2^25. Fits in 32 bit.
		long long int detuneStepContribution=0;
		if(0!=slot.DT)
		{
			long long int hertz1000=detune1000Table[(ch.BLOCK<<4)+(NOTE<<2)+(slot.DT&3)];
			detuneStepContribution=(hertz1000*PHASE_STEPS);
			detuneStepContribution/=1000;
			if(0!=(slot.DT&4))
			{
				detuneStepContribution=-detuneStepContribution;
			}
		}

		UpdatePhase12StepSlot(slot,hertzX16);

		 // Should consider DETUNE.

		// (hertzX16*PHASE_STEPS)<<8==hertz*PHASE_STEPS*4096
		CalculateEnvelope(slot.env,slot.RRCache,KC,slot);
		slot.envDurationCache=slot.env[0]+slot.env[2]+slot.env[4];
	}

	ch.toneDuration12=CalculateToneDurationMilliseconds(chNum);
	ch.toneDuration12<<=12;
#ifdef YM2612_DEBUGOUTPUT
	printf("%d BLOCK %03xH F_NUM %03xH Hertz %d Max Duration %d\n",KC,ch.BLOCK,ch.F_NUM,hertzX16/16,ch.toneDuration12>>12);
#endif

	ch.nextMicrosec12=ch.microsec12;
	ch.lastSlot0OutForNextWave=ch.lastSlot0Out;
	ch.nextFeedbackUpdateCycle=ch.feedbackUpdateCycle;
	ch.slots[0].nextPhase12=ch.slots[0].phase12;
	ch.slots[1].nextPhase12=ch.slots[1].phase12;
	ch.slots[2].nextPhase12=ch.slots[2].phase12;
	ch.slots[3].nextPhase12=ch.slots[3].phase12;
}

void YM2612::UpdatePhase12StepSlot(Slot &slot,const unsigned int hertzX16)
{
	// Phase runs hertz*PHASE_STEPS times per second.
	//            hertz*PHASE_STEPS/WAVE_SAMPLING_RATE times per step.
	// Phase 12 runs
	//            0x1000*hertz*PHASE_STEPS/WAVE_SAMPLING_RATE per step.
	unsigned long long phase12Step;
	phase12Step=MULTITable[slot.MULTI]*hertzX16*PHASE_STEPS; // 2X from MULTITable, 16X from hertzX16
	phase12Step<<=7;                                         // 128X  Overall 2x16x128=4096X
	phase12Step/=WAVE_SAMPLING_RATE;
	slot.phase12Step=(unsigned int)phase12Step;
}

void YM2612::UpdatePhase12StepSlot(Channel &ch)
{
	const unsigned int hertzX16=BLOCK_FNUM_to_FreqX16(ch.BLOCK,ch.F_NUM);
	for(auto &slot : ch.slots)
	{
		UpdatePhase12StepSlot(slot,hertzX16);
	};
}

void YM2612::KeyOff(unsigned int chNum)
{
	if(0!=(state.playingCh&(1<<chNum)))
	{
		auto &ch=state.channels[chNum];
		for(auto &slot : ch.slots)
		{
			if(true!=slot.InReleasePhase)
			{
				slot.InReleasePhase=true;
				slot.ReleaseStartTime=(ch.microsec12>>12)/1000;
				slot.ReleaseStartDb100=slot.lastDb100Cache;

				auto releaseTime=sustainDecayReleaseTime0to96dB[std::min<unsigned int>(slot.RRCache,63)];
				releaseTime*=slot.lastDb100Cache;
				releaseTime/=960000;
				slot.ReleaseEndTime=slot.ReleaseStartTime+releaseTime;
			#ifdef YM2612_DEBUGOUTPUT
				std::cout << "Release Time " << releaseTime << "ms  " << 
				             "Start " << slot.ReleaseStartTime << "ms  " << 
				             "End " << slot.ReleaseEndTime << "ms" << std::endl;
			#endif
			}
		}
	}
}

void YM2612::CheckToneDone(unsigned int chNum)
{
	auto &ch=state.channels[chNum];
	if(CH_PLAYING!=ch.playState)
	{
		state.playingCh&=~(1<<chNum);
	}
	else
	{
		auto millisec=(ch.microsec12>>12)/1000;
		bool slotStillPlaying=false;
		for(int i=0; i<connectionToOutputSlots[ch.CONNECT].nOutputSlots; ++i)
		{
			auto &slot=ch.slots[connectionToOutputSlots[ch.CONNECT].slots[i]];
			if(true==slot.InReleasePhase && millisec<slot.ReleaseEndTime)
			{
				slotStillPlaying=true;
				break;;
			}
			else if(true!=slot.InReleasePhase && millisec<slot.envDurationCache)
			{
				slotStillPlaying=true;
				break;;
			}
		}
		if(true!=slotStillPlaying)
		{
			state.playingCh&=~(1<<chNum);
			ch.playState=CH_IDLE;
			for(auto &s : ch.slots)
			{
				s.InReleasePhase=false;
			}
		}
	}
}

std::vector <unsigned char> YM2612::MakeWave(unsigned int chNum,unsigned long long int millisec) const
{
	std::vector <unsigned char> wave;

	unsigned long long int numSamples=(millisec<<12);
	numSamples*=WAVE_SAMPLING_RATE;
	numSamples/=1000;
	numSamples>>=12;

	wave.resize(4*numSamples);
	std::memset(wave.data(),0,wave.size());
	MakeWaveForNSamples(wave.data(),chNum,numSamples);
	return wave;
}

long long int YM2612::MakeWaveForNSamples(unsigned char wave[],unsigned int chNum,unsigned long long int numSamples) const
{
	auto &ch=state.channels[chNum];

	const unsigned int microsec12Step=4096000000/WAVE_SAMPLING_RATE;
	// Time runs 1/WAVE_SAMPLING_RATE seconds per step
	//           1000/WAVE_SAMPLING_RATE milliseconds per step
	//           1000000/WAVE_SAMPLING_RATE microseconds per step
	//           1000000000/WAVE_SAMPLING_RATE nanoseconds per step

	// If microSec12=4096*microseconds, tm runs
	//           4096000000/WAVE_SAMPLING_RATE per step

	auto microsec12=ch.microsec12;
	unsigned int phase12[4]=
	{
		ch.slots[0].phase12,
		ch.slots[1].phase12,
		ch.slots[2].phase12,
		ch.slots[3].phase12,
	};
	int lastSlot0Out=ch.lastSlot0Out;
	int feedbackUpdateCycle=ch.feedbackUpdateCycle;

	unsigned int LeftANDPtn=(0!=ch.L ? ~0 : 0);
	unsigned int RightANDPtn=(0!=ch.R ? ~0 : 0);

	unsigned int i;
	unsigned long long int toneDurationMicrosec12=ch.toneDuration12;
	toneDurationMicrosec12*=1000;
	for(i=0; i<numSamples && microsec12<toneDurationMicrosec12; ++i)
	{
		const unsigned int microsec=(unsigned int)(microsec12>>12);
		int PMSAdjustment[4]=
		{
			0,0,0,0
		};
		int AMSAdjustment[4]=
		{
			4096,4096,4096,4096
		};

		if(true==state.LFO)
		{
			unsigned long long int LFOPhase=microsec;
			LFOPhase=LFOPhase*PHASE_STEPS/LFOCycleMicroSec[state.FREQCTRL];
			if(0!=ch.PMS)
			{
				int PMSAdj=PMS16384Table[ch.PMS]*sineTable[LFOPhase&PHASE_MASK]/UNSCALED_MAX;
				for(unsigned int i=0; i<connectionToOutputSlots[ch.CONNECT].nOutputSlots; ++i)
				{
					auto sl=connectionToOutputSlots[ch.CONNECT].slots[i];
					int signedStep=ch.slots[sl].phase12Step;
					PMSAdjustment[sl]=signedStep*PMSAdj/16384/2;
				}
			}
			{
				for(unsigned int i=0; i<connectionToOutputSlots[ch.CONNECT].nOutputSlots; ++i)
				{
					auto sl=connectionToOutputSlots[ch.CONNECT].slots[i];
					if(0!=ch.slots[sl].AM)
					{
						AMSAdjustment[sl]=4096+AMS4096Table[ch.AMS]*sineTable[LFOPhase&PHASE_MASK]/UNSCALED_MAX;
					}
				}
			}
		}

		auto s0Out=lastSlot0Out;
		auto ampl=CalculateAmplitude(chNum,microsec/1000,phase12,AMSAdjustment,s0Out);  // Envelope takes milliseconds.
		--feedbackUpdateCycle;
		if(feedbackUpdateCycle<=0)
		{
			feedbackUpdateCycle=initialFeedbackUpdateCycle;
			lastSlot0Out=s0Out;
		}

		wave[i*4  ]=(LeftANDPtn&(ampl&255));
		wave[i*4+1]=(LeftANDPtn&((ampl>>8)&255));
		wave[i*4+2]=(RightANDPtn&(ampl&255));
		wave[i*4+3]=(RightANDPtn&((ampl>>8)&255));

		phase12[0]+=ch.slots[0].phase12Step+PMSAdjustment[0];
		phase12[1]+=ch.slots[1].phase12Step+PMSAdjustment[1];
		phase12[2]+=ch.slots[2].phase12Step+PMSAdjustment[2];
		phase12[3]+=ch.slots[3].phase12Step+PMSAdjustment[3];
		microsec12+=microsec12Step;
	}

	ch.nextMicrosec12=microsec12;
	ch.lastSlot0OutForNextWave=lastSlot0Out;
	ch.nextFeedbackUpdateCycle=feedbackUpdateCycle;
	ch.slots[0].nextPhase12=phase12[0];
	ch.slots[1].nextPhase12=phase12[1];
	ch.slots[2].nextPhase12=phase12[2];
	ch.slots[3].nextPhase12=phase12[3];

// std::cout << (microsec12>>12) << "us " << std::endl;
// std::cout << phase12[0] << "," << (phase12[0]>>12)/PHASE_STEPS << "cycles" << std::endl;
// std::cout << phase12[1] << "," << (phase12[1]>>12)/PHASE_STEPS << "cycles" << std::endl;
// std::cout << phase12[2] << "," << (phase12[2]>>12)/PHASE_STEPS << "cycles" << std::endl;
// std::cout << phase12[3] << "," << (phase12[3]>>12)/PHASE_STEPS << "cycles" << std::endl;

	return i;
}

void YM2612::NextWave(unsigned int chNum)
{
	auto &ch=state.channels[chNum];
	if(CH_PLAYING==ch.playState)
	{
		ch.microsec12=ch.nextMicrosec12;
		ch.lastSlot0Out=ch.lastSlot0OutForNextWave;
		ch.feedbackUpdateCycle=ch.nextFeedbackUpdateCycle;
		ch.slots[0].phase12=ch.slots[0].nextPhase12;
		ch.slots[1].phase12=ch.slots[1].nextPhase12;
		ch.slots[2].phase12=ch.slots[2].nextPhase12;
		ch.slots[3].phase12=ch.slots[3].nextPhase12;
	}
}

unsigned int YM2612::CalculateToneDurationMilliseconds(unsigned int chNum) const
{
	unsigned int durationInMS=0;
	auto &ch=state.channels[chNum];
	for(int slotNum=0; slotNum<NUM_SLOTS; ++slotNum)
	{
		if(0!=connToOutChannel[ch.CONNECT][slotNum])
		{
			auto &slot=ch.slots[slotNum];
			durationInMS=std::max(durationInMS,slot.env[0]+slot.env[2]+slot.env[4]);
		}
	}
	return durationInMS;
}

bool YM2612::CalculateEnvelope(unsigned int env[6],unsigned int &RR,unsigned int KC,const Slot &slot) const
{
	KC&=31;

#ifdef YM2612_DEBUGOUTPUT
	std::cout << KC << "," << slot.KS << "," << (KC>>(3-slot.KS)) << ", ";
#endif

	unsigned int AR=slot.AR*2+(KC>>(3-slot.KS));
	unsigned int DR=slot.DR*2+(KC>>(3-slot.KS));
	unsigned int SR=slot.SR*2+(KC>>(3-slot.KS));
	             RR=(slot.RR*2+1)*2+(KC>>(3-slot.KS));  // [2] pp.206 Double RR and add 1.
	AR=std::min(AR,63U);
	DR=std::min(DR,63U);
	SR=std::min(SR,63U);
	RR=std::min(RR,63U);

	if(AR<4)
	{
		return NoTone(env,RR);
	}

	auto TLdB100=TLtoDB100[slot.TL];
	auto SLdB100=SLtoDB100[slot.SL];

	if(9600<=TLdB100)
	{
		return NoTone(env,RR);
	}

	const unsigned int TLinv=9600-TLdB100;

#ifdef YM2612_DEBUGOUTPUT
	std::cout << "AR=" << AR << " DR=" << DR << " SR=" << SR << " TL=" << slot.TL  << " SL=" << slot.SL ;
	std::cout << " ";
#endif

	// Ealier I was linearly interpolating the amplitude, but maybe it is linear in dB scale.
	env[1]=TLinv;
	env[3]=(SLdB100<TLinv ? TLinv-SLdB100 : 0);
	env[5]=0;


	// After reading fmgen.c (Written by cisc, Author of M88 PC8801 emulator), it looks to be that
	// the time for attack doesn't depend on the total level, but it takes time to raise 0dB to 96dB all the time.
	// Then, the time for decay is based on SL only.  Just like dropping from 96dB to 96-dB(SL) dB.
	// The secondary decay duration should also depend only on SL, the time for 96-dB(SL)dB to 0dB.
	// The amplitude change is not linear, but I approximate by a linear function.  I may come back to the envelope
	// generation once I get a good enough approximation.
	unsigned long long int mul;
	env[0]=attackTime0to96dB[AR]/100;
	mul=SLdB100;
	mul*=sustainDecayReleaseTime0to96dB[DR];
	mul/=960000;
	env[2]=(unsigned int)mul;
	mul=9600-SLdB100;
	mul*=sustainDecayReleaseTime0to96dB[SR];
	mul/=960000;
	env[4]=(unsigned int)mul;

	// ?
	// If, AR, DR, SR, and RR are really rates, the duration for attack, decay, and sustain should depend
	// on the amplitude.  If the amplitude for total level is high, it should take longer to get to the level.
	// Or, if it is the rate, the slope of the decay should be the same regardless of the TL amplitude.
	// But, the value calculated from this assumption doesn't make sense at all.
	// It rather makes sense if I take the number from the table without scaling by the amplitude.

	// env[0]=attackTime0to96dB[AR]/100;
	// env[2]=sustainDecayReleaseTime0to96dB[DR]/100;
	// env[4]=sustainDecayReleaseTime0to96dB[SR]/100;

	// ?
	// If it is really rate, the following code should better emulate, but doesn't look to be.
	// unsigned long long int attackTime=attackTime0to96dB[AR]; // 1/100 milliseconds for jumping from 0 to 127 (96dB)
	// // If TLampl==127, it takes attackTime/100 milliseconds to reach TLampl.
	// attackTime*=TLampl;
	// env[0]=(unsigned int)(attackTime/12700);

	// unsigned long long int decayTime=sustainDecayReleaseTime0to96dB[DR];
	// decayTime*=(TLampl-SLampl);
	// env[2]=(unsigned int)(decayTime/12700);

	// unsigned long long int sustainTime=sustainDecayReleaseTime0to96dB[SR];
	// sustainTime*=SLampl;
	// sustainTime/=127;
	// if(sustainTime<TONE_CHOPOFF_MILLISEC*100)
	// {
	// 	env[4]=(unsigned int)(sustainTime/12700);
	// }
	// else
	// {
	// 	env[4]=TONE_CHOPOFF_MILLISEC;
	// }

#ifdef YM2612_DEBUGOUTPUT
	for(int i=0; i<6; ++i){std::cout << env[i] << ",";}
	std::cout << "  RR=" << RR << "(" << sustainDecayReleaseTime0to96dB[RR]/100 << ")";
	std::cout << std::endl;
#endif

	return true;
}

int YM2612::CalculateAmplitude(int chNum,unsigned int timeInMS,const unsigned int slotPhase12[4],const int AMS4096[4],int &lastSlot0Out) const
{
	if(true==channelMute[chNum])
	{
		return 0;
	}

	auto &ch=state.channels[chNum];
	bool slotActive[4]=
	{
		0!=(ch.usingSlot&1) || ch.slots[0].InReleasePhase,
		0!=(ch.usingSlot&2) || ch.slots[1].InReleasePhase,
		0!=(ch.usingSlot&4) || ch.slots[2].InReleasePhase,
		0!=(ch.usingSlot&8) || ch.slots[3].InReleasePhase,
	};

	#define SLOTOUTEV_Db_0(phaseShift,timeInMS) ((true!=slotActive[0] ? 0 : ch.slots[0].EnvelopedOutputDb((slotPhase12[0]>>12),phaseShift,timeInMS,ch.FB,lastSlot0Out))*AMS4096[0]/4096)
	#define SLOTOUTEV_Db_1(phaseShift,timeInMS) ((true!=slotActive[1] ? 0 : ch.slots[1].EnvelopedOutputDb((slotPhase12[1]>>12),phaseShift,timeInMS))*AMS4096[1]/4096)
	#define SLOTOUTEV_Db_2(phaseShift,timeInMS) ((true!=slotActive[2] ? 0 : ch.slots[2].EnvelopedOutputDb((slotPhase12[2]>>12),phaseShift,timeInMS))*AMS4096[2]/4096)
	#define SLOTOUTEV_Db_3(phaseShift,timeInMS) ((true!=slotActive[3] ? 0 : ch.slots[3].EnvelopedOutputDb((slotPhase12[3]>>12),phaseShift,timeInMS))*AMS4096[3]/4096)

	#define SLOTOUTEV_Ln_0(phaseShift,timeInMS) ((true!=slotActive[0] ? 0 : ch.slots[0].EnvelopedOutputLn((slotPhase12[0]>>12),phaseShift,timeInMS,ch.FB,lastSlot0Out))*AMS4096[0]/4096)
	#define SLOTOUTEV_Ln_1(phaseShift,timeInMS) ((true!=slotActive[1] ? 0 : ch.slots[1].EnvelopedOutputLn((slotPhase12[1]>>12),phaseShift,timeInMS))*AMS4096[1]/4096)
	#define SLOTOUTEV_Ln_2(phaseShift,timeInMS) ((true!=slotActive[2] ? 0 : ch.slots[2].EnvelopedOutputLn((slotPhase12[2]>>12),phaseShift,timeInMS))*AMS4096[2]/4096)
	#define SLOTOUTEV_Ln_3(phaseShift,timeInMS) ((true!=slotActive[3] ? 0 : ch.slots[3].EnvelopedOutputLn((slotPhase12[3]>>12),phaseShift,timeInMS))*AMS4096[3]/4096)

	#define SLOTOUT_0(phaseShift,timeInMS) ((true!=slotActive[0] ? 0 : ch.slots[0].UnscaledOutput((slotPhase12[0]>>12),phaseShift,ch.FB,lastSlot0Out))*AMS4096[0]/4096)
	#define SLOTOUT_1(phaseShift,timeInMS) ((true!=slotActive[1] ? 0 : ch.slots[1].UnscaledOutput((slotPhase12[1]>>12),phaseShift))*AMS4096[1]/4096)
	#define SLOTOUT_2(phaseShift,timeInMS) ((true!=slotActive[2] ? 0 : ch.slots[2].UnscaledOutput((slotPhase12[2]>>12),phaseShift))*AMS4096[2]/4096)
	#define SLOTOUT_3(phaseShift,timeInMS) ((true!=slotActive[3] ? 0 : ch.slots[3].UnscaledOutput((slotPhase12[3]>>12),phaseShift))*AMS4096[3]/4096)

	int s0out,s1out,s2out,s3out;
	switch(ch.CONNECT)
	{
	default:
	case 0:
		s0out=SLOTOUTEV_Db_0(0,    timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(s0out,timeInMS);
		s2out=SLOTOUTEV_Db_2(s1out,timeInMS);
		return SLOTOUTEV_Db_3(s2out,timeInMS)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX;
	case 1:
		s0out=SLOTOUTEV_Db_0(0,timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(0,timeInMS);
		s2out=SLOTOUTEV_Db_2(s0out+s1out,timeInMS);
		return SLOTOUTEV_Db_3(s2out,timeInMS)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX;
	case 2:
		s0out=SLOTOUTEV_Db_0(0,timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(0,timeInMS);
		s2out=SLOTOUTEV_Db_2(s1out,timeInMS);
		return SLOTOUTEV_Db_3(s0out+s2out,timeInMS)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX;
	case 3:
		s0out=SLOTOUTEV_Db_0(0,    timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(s0out,timeInMS);
		s2out=SLOTOUTEV_Db_2(0    ,timeInMS);
		return SLOTOUTEV_Db_3(s1out+s2out,timeInMS)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX;
	case 4:
		s0out=SLOTOUTEV_Db_0(0,    timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(s0out,timeInMS);
		s2out=SLOTOUTEV_Db_2(0    ,timeInMS);
		s3out=SLOTOUTEV_Db_3(s2out,timeInMS);
		return ((s1out+s3out)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX);
		// Test only Slot 3 -> return SLOTOUTEV_Db_3(0,timeInMS)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX;
	case 5:
		s0out=SLOTOUTEV_Db_0(0,    timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(s0out,timeInMS);
		s2out=SLOTOUTEV_Db_2(s0out,timeInMS);
		s3out=SLOTOUTEV_Db_3(s0out,timeInMS);
		return ((s1out+s2out+s3out)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX);
	case 6:
		s0out=SLOTOUTEV_Db_0(0,    timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(s0out,timeInMS);
		s2out=SLOTOUTEV_Db_2(0    ,timeInMS);
		s3out=SLOTOUTEV_Db_3(0    ,timeInMS);
		return ((s1out+s2out+s3out)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX);
	case 7:
		s0out=SLOTOUTEV_Db_0(0,timeInMS);
		lastSlot0Out=s0out;
		s1out=SLOTOUTEV_Db_1(0,timeInMS);
		s2out=SLOTOUTEV_Db_2(0,timeInMS);
		s3out=SLOTOUTEV_Db_3(0,timeInMS);
		return ((s0out+s1out+s2out+s3out)*WAVE_OUTPUT_AMPLITUDE_MAX/UNSCALED_MAX);
	}
}
